#!/usr/bin/env python

# Visualize the .npy files generated by the training runs.
# Check the show and save flags below, and
# run it with the names of the generating class files on the command line
# (i.e., the .npy filenames without the -??.npy suffix).

import sys
import numpy as np
import matplotlib.pyplot as plt

maxRuns = 10

def loadNextRun(method, run):
    while run < maxRuns:
        filename = f"{method}-{run:02d}.npy"
        try:
            return run + 1, np.load(filename)[:,1]
        except:
            print("File not found:", filename)
        run += 1
    return run, False

def load(method):
    run, firstRun = loadNextRun(method, 0)
    runs = np.zeros((maxRuns, len(firstRun)))
    row = 0
    runs[row,:] = firstRun
    while run < maxRuns:
        row += 1
        run, runs[row,:] = loadNextRun(method, run)
    if not runs[row,0]:
        row -= 1
    return runs[0:row+1,:]

def plotRuns(method, runs, show=True, save=True):
    fig, ax = plt.subplots(1, 1)
    ax.plot(runs.T)
    ax.set_title(method)
    ax.set_xlabel("training episodes")
    ax.set_ylabel(f"per-episode return for each of {runs.shape[0]} runs")
    if save:
        plt.savefig(f"{method}-runs.svg", bbox_inches='tight', pad_inches=0)
    if show:
        plt.show()

def plotStatRuns(method, runs, show=True, save=True):
    fig, ax = plt.subplots(1, 1)
    ax.plot(runs.max(axis=0), label='max')
    ax.plot(runs.min(axis=0), label='min')
    ax.plot(np.median(runs, axis=0), label='median')
    ax.plot(runs.mean(axis=0), label='mean')
    ax.legend()
    ax.set_title(method)
    ax.set_xlabel("training episodes")
    ax.set_ylabel(f"per-episode return statistics of {runs.shape[0]} runs")
    if save:
        plt.savefig(f"{method}-stats.svg", bbox_inches='tight', pad_inches=0)
    if show:
        plt.show()


show = False
save = True
for method in sys.argv[1:]:
    runs = load(method)
    plotRuns(method, runs, show=show, save=save)
    plotStatRuns(method, runs, show=show, save=save)
